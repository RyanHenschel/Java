import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

/**
 * @author Ryan Henschel
 * CS 220
 * LAB 4 Suduko
 * 4/9/15
 * This class allows the user to play
 * the suduko game by starting a new game,
 * loading a saved game, or saving a game
 * when the user is finished playing
 */
public class SudukoPlayer extends Suduko 
{
	/**
	 * This method is a constructor that sets board
	 * with a set of predetermined numbers loaded 
	 * from a file given by the user
	 * 
	 * @param inputFileName is the file either given
	 *    by the user or defaulted by the programmer
	 */
	public SudukoPlayer(String inputFileName) 
	{
		super(inputFileName);
		Scanner in = new Scanner(System.in); 
		board = new int[ROWS][COLUMNS];
		String line = in.nextLine();
		int k = 0;
		for (int i=0; i<ROWS; i++)
		{
			for (int j=0; j<COLUMNS; j++)
			{
				if (!Character.isDigit(line.charAt(k)))
				{
					char ch = line.charAt(k);
					board[i][j] = ch;	
				}
				else
					board[i][j] = 0;
				k++;
			}
		}
	}

	/**
	 * This main method interacts with the user 
	 * and allows the user to load a game, play
	 * the game, or save the game when finished
	 * playing
	 * 
	 * @param args is a parameter used 
	 *        with String to print
	 */
	public static void main(String[] args) throws FileNotFoundException 
	{
		//Scanner in = null;
		File inputFile = null;
		System.out.print("Input file: ");
		String inputFileName = null;
		Suduko suduko1 = new Suduko(inputFileName);
		try
		{
			Scanner in = new Scanner(System.in);
			inputFileName = in.next();
			inputFile = new File(inputFileName);
			suduko1 = new Suduko(inputFileName);
		}
		catch (FileNotFoundException exception)
		{
			System.out.println("The file does not exist. A default file will be loaded for you.");
			inputFileName = "suduko.txt";
			inputFile = new File(inputFileName);
			Suduko suduko11 = new Suduko(inputFileName);
			suduko1 = suduko11;
		}    
		int play = 1;
		while (play > 0)
		{
			System.out.print("Enter a O to insert a value, a 1 to remove a value, a 2 to quit: ");
			int user = in.nextInt();

			if (user == 0)
			{
				System.out.print("Please enter the row number: ");
				int r = in.nextInt();
				System.out.print("Please enter the column number: ");
				int c = in.nextInt();
				System.out.print("Please enter the new value: ");
				int val = in.nextInt();

				if (val>maxVal || val<minVal)
					throw new IllegalArgumentException("That's an invalid number.");
				if (r<0 || r>ROWS-1)
					throw new IndexOutOfBoundsException("That isn't a correct row number.");
				if (c<0 || c>COLUMNS-1)
					throw new IndexOutOfBoundsException("That isn't a correct column number.");

				suduko1.insertVal(r, c, val);
				suduko1.printMySuduko();
				play++;
			}
			else if (user == 1)
			{
				System.out.print("Please enter the row number: ");
				int r = in.nextInt();
				System.out.print("Please enter the column number: ");
				int c = in.nextInt();
				int val = 1;

				if (val>maxVal || val<minVal)
					throw new IllegalArgumentException("That's an invalid number.");
				if (r<0 || r>ROWS-1)
					throw new IndexOutOfBoundsException("That isn't a correct row number.");
				if (c<0 || c>COLUMNS-1)
					throw new IndexOutOfBoundsException("That isn't a correct column number.");

				suduko1.removeVal(r, c, val);
				suduko1.printMySuduko();
				play++;
			}
			else
			{
				int play2 = play - 1; 
				System.out.println("Thank you for playing! You had " + play2 + " moves.");
				play = 0;

				in.close();
				suduko1.saveGame();
			}
		}
	}
}