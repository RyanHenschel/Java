public class Suduko {
	final int ROWS = 9;
	final int COLUMNS = 9;
	int[][] board;

	public Suduko(int q) {
		board = new int[ROWS][COLUMNS];
		for (int i=0; i<ROWS; i++)
			for (int j=0; j<COLUMNS; j++)
				board[i][j] = 0;
	}

	public Suduko() {
		board = new int[ROWS][COLUMNS];
		for (int i=0; i<ROWS; i++)
			for (int j=0; j<COLUMNS; j++)
				board[i][j] = 0;
		board[0][0] = 5;
		board[0][1] = 3;
		board[0][4] = 7;
		board[1][0] = 6;
		board[1][3] = 1;
		board[1][4] = 9;
		board[1][5] = 5;
		board[2][1] = 9;
		board[2][2] = 8;
		board[2][7] = 6;
		board[3][0] = 8;
		board[3][4] = 6;
		board[3][8] = 3;
		board[4][0] = 4;
		board[4][3] = 8;
		board[4][5] = 3;
		board[4][8] = 1;
		board[5][0] = 7;
		board[5][4] = 2;
		board[5][8] = 6;
		board[6][1] = 6;
		board[6][6] = 2;
		board[6][7] = 8;
		board[7][3] = 4;
		board[7][4] = 1;
		board[7][5] = 9;
		board[7][8] = 5;
		board[8][4] = 8;
		board[8][7] = 7;
		board[8][8] = 9;
		
	}
	//prints the current values of the suduko array, including empty spots
	public void printMySuduko() {
		for (int i=0; i<ROWS; i++)
			for (int j=0; j<COLUMNS; j++)
			{
				System.out.print(board[i][j]);
			}
			System.out.println();
	}
	//returns true if able to insert the value indicated in val into the suduko 
	//array at the location indicated by r-row and c-column and inserts it
	public boolean insertVal(int r, int c, int val) {
		if (r<0 || c<0 || r>8 || c>8 || val>9 || val<1)
		{
			return false;
		}
		else
		{
			board[r-1][c-1] = val;
			return true;
		}
	}
	//returns true if able to remove the value indicated in val into the suduko array at the location indicated by r-row and c-column and removes it
	public boolean removeVal(int r, int c, int val) {
		if (r<0 || c<0 || r>8 || c>8 || val>9 || val<1)
		{
			return false;
		}
		else
		{
			board[r-1][c-1] = 0;
			return true;
		}
	}
	//returns true if it is okay to insert val at location indicated by r-row and c-column along that ROW
	private boolean checkRow(int r, int c, int val) {

		for(int i=0; i<9; i++)
		{
			if (val == board[r][i])
			{
				return false;
			}
		}
		return true;

		
	}
	//returns true if it is okay to insert val at location indicated by r-row and c-column along that COLUMN
	private boolean checkCol(int r, int c, int val) {
		for(int i=0; i<9; i++)
		{
			if (val == board[i][c])
			{
				return false;
			}
		}
		return true;
	}
	
	//returns true if it is okay to insert val at location indicated by r-row and c-column inside that BOX
	private boolean checkBox(int r, int c, int val) {
		if (board[r][c] == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

